datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id        String   @id @default(cuid())
  title     String
  status    Status   @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  icon      String
  tasks     Task[]

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Task {
  id        String   @id @default(cuid())
  title     String
  status    Status   @default(pending)
  priority  Priority @default(medium)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  icon      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  projects Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  pending
  in_progress
  completed
}

enum Priority {
  low
  medium
  high
}
